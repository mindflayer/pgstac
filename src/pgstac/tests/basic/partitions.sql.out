-- run tests as pgstac_ingest
SET ROLE pgstac_ingest;
SET
SET pgstac.use_queue=FALSE;
SET
SELECT get_setting_bool('use_queue');
f
SET pgstac.update_collection_extent=TRUE;
SET
SELECT get_setting_bool('update_collection_extent');
t
--create base data to use with tests
CREATE TEMP TABLE test_items AS
SELECT jsonb_build_object(
'id', concat('pgstactest-partitioned-', (row_number() over ())::text),
'collection', 'pgstactest-partitioned',
'geometry', '{"type": "Polygon", "coordinates": [[[-85.309412, 30.933949], [-85.308201, 31.002658], [-85.378084, 31.003555], [-85.379245, 30.934843], [-85.309412, 30.933949]]]}'::json,
'properties', jsonb_build_object( 'datetime', g::text)
) as content FROM generate_series('2020-01-01'::timestamptz, '2022-01-01'::timestamptz, '1 week'::interval) g;
SELECT 105
--test non-partitioned collection
INSERT INTO collections (content) VALUES ('{"id":"pgstactest-partitioned"}');
INSERT 0 1
INSERT INTO items_staging(content)
SELECT content FROM test_items;
INSERT 0 105
SELECT count(*) FROM partitions WHERE collection='pgstactest-partitioned';
1

--test collection partioned by year
INSERT INTO collections (content, partition_trunc) VALUES ('{"id":"pgstactest-partitioned-year"}', 'year');
INSERT 0 1
INSERT INTO items_staging(content)
SELECT content || '{"collection":"pgstactest-partitioned-year"}'::jsonb FROM test_items;
INSERT 0 105
SELECT count(*) FROM partitions WHERE collection='pgstactest-partitioned-year';
2

--test collection partioned by month
INSERT INTO collections (content, partition_trunc) VALUES ('{"id":"pgstactest-partitioned-month"}', 'month');
INSERT 0 1
INSERT INTO items_staging(content)
SELECT content || '{"collection":"pgstactest-partitioned-month"}'::jsonb FROM test_items;
INSERT 0 105
SELECT count(*) FROM partitions WHERE collection='pgstactest-partitioned-month';
24

--test repartitioning from year to non partitioned
UPDATE collections SET partition_trunc=NULL WHERE id='pgstactest-partitioned-year';
UPDATE 1
SELECT count(*) FROM partitions WHERE collection='pgstactest-partitioned-year';
1

SELECT count(*) FROM items WHERE collection='pgstactest-partitioned-year';
105

--test repartitioning from non-partitioned to year
UPDATE collections SET partition_trunc='year' WHERE id='pgstactest-partitioned';
UPDATE 1
SELECT count(*) FROM partitions WHERE collection='pgstactest-partitioned';
2

SELECT count(*) FROM items WHERE collection='pgstactest-partitioned';
105

--check that partition stats have been updated
SELECT count(*) FROM partitions WHERE collection='pgstactest-partitioned' and spatial IS NULL;
0

--test noop for repartitioning
UPDATE collections SET content=content || '{"foo":"bar"}'::jsonb WHERE id='pgstactest-partitioned-month';
UPDATE 1
SELECT count(*) FROM partitions WHERE collection='pgstactest-partitioned-month';
24

SELECT count(*) FROM items WHERE collection='pgstactest-partitioned-month';
105

--test using query queue
SET pgstac.use_queue=TRUE;
SET
SELECT get_setting_bool('use_queue');
t
INSERT INTO collections (content, partition_trunc) VALUES ('{"id":"pgstactest-partitioned-q"}', 'month');
INSERT 0 1
INSERT INTO items_staging(content)
SELECT content || '{"collection":"pgstactest-partitioned-q"}'::jsonb FROM test_items;
INSERT 0 105
SELECT count(*) FROM partitions WHERE collection='pgstactest-partitioned-q';
24

--check that partition stats haven't been updated
SELECT count(*) FROM partitions WHERE collection='pgstactest-partitioned-q' and spatial IS NULL;
24

--check that queue has items
SELECT count(*)>0 FROM query_queue;
t

--run queue items to update partition stats
SELECT run_queued_queries_intransaction()>0;
t

--check that queue has been emptied
SELECT count(*) FROM query_queue;
0

SELECT run_queued_queries_intransaction();
0

--check that partition stats have been updated
SELECT count(*) FROM partitions WHERE collection='pgstactest-partitioned-q' and spatial IS NULL;
0

--check that collection extents have been updated
SELECT id, content->'extent' FROM collections WHERE id LIKE 'pgstactest-partitioned%' ORDER BY id;
pgstactest-partitioned       | {"spatial": {"bbox": [[-85.3792495727539, 30.933948516845703, -85.30819702148438, 31.003555297851562]]}, "temporal": {"interval": [["2020-01-01T00:00:00+00:00", "2021-12-29T00:00:00+00:00"]]}}
pgstactest-partitioned-month | {"spatial": {"bbox": [[-85.3792495727539, 30.933948516845703, -85.30819702148438, 31.003555297851562]]}, "temporal": {"interval": [["2020-01-01T00:00:00+00:00", "2021-12-29T00:00:00+00:00"]]}}
pgstactest-partitioned-q     | {"spatial": {"bbox": [[-85.3792495727539, 30.933948516845703, -85.30819702148438, 31.003555297851562]]}, "temporal": {"interval": [["2020-01-01T00:00:00+00:00", "2021-12-29T00:00:00+00:00"]]}}
pgstactest-partitioned-year  | {"spatial": {"bbox": [[-85.3792495727539, 30.933948516845703, -85.30819702148438, 31.003555297851562]]}, "temporal": {"interval": [["2020-01-01T00:00:00+00:00", "2021-12-29T00:00:00+00:00"]]}}
